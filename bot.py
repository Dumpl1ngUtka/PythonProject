import telebot
from game import word_generation, compare_word
from entities import Player
from menu import Menu
from utils import create_keyboard, load_words
from telebot.types import Message
from typing import List, Dict  # noqa: F401
import os  # noqa: F401

token = "7327679974:AAEMHBPM0ao2__YNkvGgQP3e2sJHDkh4snE"
bot = telebot.TeleBot(token)
players: Dict[str, Player] = {}
available_lengths = [4, 5, 6, 7, 8]
available_attempt_count = [5, 6, 7, 8]

words = load_words(available_lengths)


def is_start_game_message(message: Message):
    return message.text in ["–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", "C—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑"]


def is_setings_message(message: Message):
    return message.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"


def is_help_message(message: Message):
    return message.text == "–ü–æ–º–æ—â—å/–ü—Ä–∞–≤–∏–ª–∞"


def is_set_len_word(message: Message):
    return message.text == "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–ª–∏–Ω—É —Å–ª–æ–≤–∞"


@bot.message_handler(commands=["start"])
def handle_start(message: Message):
    players[str(message.from_user.id)] = Player(message.from_user.first_name)
    bot.send_message(
        message.from_user.id,
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n–≠—Ç–æ Guess Word - —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Å–∏–ª—ã –≤ —É–≥–∞–¥—ã–≤–∞–Ω–∏–∏ —Å–ª–æ–≤!",
        reply_markup=create_keyboard(Menu[Player.location]["avalible_steps"]),
    )


@bot.message_handler()
def main_meneger(message: Message):
    if players[str(message.from_user.id)].location == "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–ª–∏–Ω—É —Å–ª–æ–≤–∞" and message.text != "–ù–∞–∑–∞–¥‚Ü©":
        if int(message.text) in available_lengths:
            players[str(message.from_user.id)].len_word = int(message.text)
            bot.send_message(
                str(message.from_user.id),
                f"–í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –¥–ª–∏–Ω—É —Å–ª–æ–≤–∞ –Ω–∞ {int(message.text)}",
            )
    elif players[str(message.from_user.id)].location == "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫" and message.text != "–ù–∞–∑–∞–¥‚Ü©":
        if int(message.text) in available_attempt_count:
            players[str(message.from_user.id)].attempt_count = int(message.text)
            bot.send_message(
                str(message.from_user.id),
                f"–í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∫–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ {int(message.text)}",
            )
    elif players[str(message.from_user.id)].location == "–ò–≥—Ä–∞—Ç—åüïπ" and message.text != "–ù–∞–∑–∞–¥‚Ü©":
        if message.text == "C—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑":
            players[str(message.from_user.id)].not_win = True
            players[str(message.from_user.id)].word = word_generation(words[players[str(message.from_user.id)].len_word])
            players[str(message.from_user.id)].attempts_left = players[str(message.from_user.id)].attempt_count
            bot.send_message(
                        message.from_user.id,
                        Menu[players[str(message.from_user.id)].location]["messege"].format(
                            len_word=players[str(message.from_user.id)].len_word,
                            attempt_count=players[str(message.from_user.id)].attempts_left),
                        reply_markup=create_keyboard(Menu[players[str(message.from_user.id)].location]["avalible_steps"])
                    )
        elif players[str(message.from_user.id)].attempts_left > 0:
            if players[str(message.from_user.id)].not_win:
                if len(message.text) != players[str(message.from_user.id)].len_word:
                    bot.send_message(message.from_user.id, "–ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–ª–æ–≤–∞")
                    print("error")
                else:
                    word_correction = compare_word(
                        players[str(message.from_user.id)].word, message.text.lower()
                    )
                    print(players[str(message.from_user.id)].word)
                    players[str(message.from_user.id)].attempts_left -= 1
                    bot.send_message(message.from_user.id, word_correction, parse_mode="MarkdownV2")
                    if word_correction == "".join(f"`{letter}`" for letter in message.text):
                        players[str(message.from_user.id)].not_win = False
                        bot.send_message(
                        message.from_user.id,
                        "–¢—ã –ø–æ–±–µ–¥–∏–ª!",
                        reply_markup=create_keyboard(["C—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑","–ù–∞–∑–∞–¥‚Ü©"])
                        )
                    elif players[str(message.from_user.id)].attempts_left <= 0:
                        players[str(message.from_user.id)].not_win = True
                        bot.send_message(
                            message.from_user.id,
                            f"–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!, –±—ã–ª–æ –∑–∞–≥–∞–¥–∞–Ω–æ —Å–ª–æ–≤–æ {players[str(message.from_user.id)].word}",
                            reply_markup=create_keyboard(["C—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑","–ù–∞–∑–∞–¥‚Ü©"]),
                            )
            else:
                bot.send_message(
                    message.from_user.id,
                    "–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é",
                    reply_markup=create_keyboard(["C—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑","–ù–∞–∑–∞–¥‚Ü©"])
                    )     
        else:
            bot.send_message(
                    message.from_user.id,
                    "–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é",
                    reply_markup=create_keyboard(["C—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑","–ù–∞–∑–∞–¥‚Ü©"])
                    )  
    elif message.text in Menu[players[str(message.from_user.id)].location]["avalible_steps"]:
        if message.text == "–ù–∞–∑–∞–¥‚Ü©":
            for location, steps in Menu.items():
                if players[str(message.from_user.id)].location in steps["avalible_steps"]:
                    players[str(message.from_user.id)].location = location
                    bot.send_message(
                        message.from_user.id,
                        Menu[players[str(message.from_user.id)].location]["messege"],
                        reply_markup=create_keyboard(Menu[location]["avalible_steps"]),
                        parse_mode="MarkdownV2"
                    )
        elif message.text == "–ò–≥—Ä–∞—Ç—åüïπ":
            players[str(message.from_user.id)].location = message.text
            players[str(message.from_user.id)].word = word_generation(words[players[str(message.from_user.id)].len_word])
            players[str(message.from_user.id)].attempts_left = players[str(message.from_user.id)].attempt_count
            bot.send_message(
                        message.from_user.id,
                        Menu[players[str(message.from_user.id)].location]["messege"].format(
                            len_word=players[str(message.from_user.id)].len_word,
                            attempt_count=players[str(message.from_user.id)].attempts_left),
                        reply_markup=create_keyboard(Menu[players[str(message.from_user.id)].location]["avalible_steps"])
                    )
        elif players[str(message.from_user.id)].location in ["–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–ª–∏–Ω—É —Å–ª–æ–≤–∞","–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫"]:
            pass
        else:
            players[str(message.from_user.id)].location = message.text
            bot.send_message(
                        message.from_user.id,
                        Menu[players[str(message.from_user.id)].location]["messege"],
                        reply_markup=create_keyboard(Menu[players[str(message.from_user.id)].location]["avalible_steps"]),
                        parse_mode="MarkdownV2"
                    )

    else:
        bot.send_message(
            message.from_user.id,
            "–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é"
        )
    


bot.polling()
